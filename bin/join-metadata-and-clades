#!/usr/bin/env python3
import argparse
import sys
from datetime import datetime
import pandas as pd
import numpy as np

INSERT_BEFORE_THIS_COLUMN = "pango_lineage"
COLUMN_TO_REORDER = "Nextstrain_clade"
METADATA_JOIN_COLUMN_NAME = 'strain'
NEXTCLADE_JOIN_COLUMN_NAME = 'seqName'
VALUE_MISSING_DATA = '?'

rate_per_day = 0.0007 * 29903 / 365
reference_day = datetime(2020,1,1).toordinal()

column_map = {
    "clade_legacy": "Nextstrain_clade",
    "clade_nextstrain": "clade_nextstrain",
    "clade_who": "clade_who",
    "Nextclade_pango": "Nextclade_pango",
    "immune_escape": "immune_escape",
    "ace2_binding": "ace2_binding",
    "totalMissing": "missing_data",
    "totalSubstitutions": "divergence",
    "totalNonACGTNs": "nonACGTN",
    "coverage": "coverage",
    "privateNucMutations.totalUnlabeledSubstitutions":  "rare_mutations",
    "privateNucMutations.totalReversionSubstitutions": "reversion_mutations",
    "privateNucMutations.totalLabeledSubstitutions": "potential_contaminants",
    "qc.missingData.status": "QC_missing_data",
    "qc.mixedSites.status": "QC_mixed_sites",
    "qc.privateMutations.status": "QC_rare_mutations",
    "qc.snpClusters.status": "QC_snp_clusters",
    "qc.frameShifts.status": "QC_frame_shifts",
    "qc.stopCodons.status": "QC_stop_codons",
    "qc.overallScore": "QC_overall_score",
    "qc.overallStatus": "QC_overall_status",
    "frameShifts": "frame_shifts",
    "deletions": "deletions",
    "insertions": "insertions",
    "substitutions": "substitutions",
    "aaSubstitutions": "aaSubstitutions"
}

clades_21L_columns = {"immune_escape","ace2_binding"}

def reorder_columns(result: pd.DataFrame):
    """
    Moves COLUMN_TO_REORDER right before INSERT_BEFORE_THIS_COLUMN
    """
    if COLUMN_TO_REORDER not in list(column_map.values()):
        raise ValueError(f"Column {COLUMN_TO_REORDER} not found in values of column_map {column_map}")
    columns = list(result.columns)
    if INSERT_BEFORE_THIS_COLUMN not in columns:
        raise ValueError(f"Column {INSERT_BEFORE_THIS_COLUMN} not found in metadata columns {columns}")
    columns.remove(COLUMN_TO_REORDER)
    insert_at = columns.index(INSERT_BEFORE_THIS_COLUMN)
    columns.insert(insert_at, COLUMN_TO_REORDER)
    return result[columns]


def parse_args():
    parser = argparse.ArgumentParser(
        description="Joins metadata file with Nextclade clade output",
    )
    parser.add_argument("first_file")
    parser.add_argument("second_file")
    parser.add_argument("nextclade_21L")
    parser.add_argument("-o", default=sys.stdout)
    return parser.parse_args()

def datestr_to_ordinal(x):
    try:
        return datetime.strptime(x,"%Y-%m-%d").toordinal()
    except:
        return np.nan

def isfloat(value):
  try:
    float(value)
    return True
  except ValueError:
    return False

def main():
    args = parse_args()

    metadata = pd.read_csv(args.first_file, index_col=METADATA_JOIN_COLUMN_NAME,
                           sep='\t', low_memory=False, na_filter = False)

    # Read and rename clade column to be more descriptive
    clades = pd.read_csv(args.second_file, index_col=NEXTCLADE_JOIN_COLUMN_NAME,
                         usecols=[NEXTCLADE_JOIN_COLUMN_NAME, *(set(column_map.keys()) - clades_21L_columns)],
                         sep='\t', low_memory=True, dtype="object", na_filter = False) \
            .rename(columns=column_map)

    clades_21L = pd.read_csv(args.nextclade_21L, index_col=NEXTCLADE_JOIN_COLUMN_NAME,
                         sep='\t', low_memory=True,
                         usecols=[NEXTCLADE_JOIN_COLUMN_NAME, *clades_21L_columns],
                         dtype={NEXTCLADE_JOIN_COLUMN_NAME: "string", "immune_escape":float, "ace2_binding":float}) \
            .rename(columns=column_map)

    # Reduce false precision in immune_escape and ace2_binding
    clades_21L = clades_21L.round(3)

    clades = pd.merge(clades, clades_21L, left_index=True, right_index=True, how='left')

    # Remove immune_escape and ace2_binding when clade <21L and not recombinant
    clades.loc[clades.Nextstrain_clade < "21L",["immune_escape","ace2_binding"]] = float('nan')


    clades = clades[list(column_map.values())]

    # Concatenate on columns
    result = pd.merge(
        metadata, clades,
        left_index=True,
        right_index=True,
        how='left'
    )

    all_clades = result.Nextstrain_clade.unique()
    t = result["date"].apply(datestr_to_ordinal)
    div_array = np.array([float(x) if isfloat(x) else np.nan for x in result.divergence])
    offset_by_clade = {}
    for clade in all_clades:
        ind = result.Nextstrain_clade==clade
        if ind.sum()>100:
            deviation = div_array[ind] - (t[ind] - reference_day)*rate_per_day
            offset_by_clade[clade] = np.mean(deviation[~np.isnan(deviation)])

    # extract divergence, time and offset information into vectors or series
    offset = result["Nextstrain_clade"].apply(lambda x: offset_by_clade.get(x, 2.0))
    # calculate divergence
    result["clock_deviation"] = np.array(div_array - ((t-reference_day)*rate_per_day + offset), dtype=int)
    result.loc[np.isnan(div_array)|np.isnan(t), "clock_deviation"] = np.nan

    for col in list(column_map.values()) + ["clock_deviation"]:
        result[col] = result[col].fillna(VALUE_MISSING_DATA)

    # Move the new column so that it's next to other clade columns
    result = reorder_columns(result)

    result.to_csv(args.o, index_label=METADATA_JOIN_COLUMN_NAME, sep='\t')


if __name__ == '__main__':
    main()
